import numpy as np
from math import *
#from pycse import bvp
import matplotlib.pyplot as plt
from numpy import *

cfl = 0.9
n=100
index = 50
x = zeros(n)
dx = 0.01
kdxvec = zeros(n)
w_mod = zeros(n)
for i in arange(0,n,1):
	kdxvec[i] = pi/n*i
	kdx = kdxvec[i]
	w_mod[i] = sin(kdx)/kdx
	#w_mod[i] = (cos(kdx)-1)/kdx

plt.plot(kdxvec,w_mod,'-k',linewidth=2,label='First order scheme')
#plt.show()

f = [ complex(i, i) for i in range(n) ] 
f_face=[ complex(i, i) for i in range(n+1) ]
for i in arange(0,n,1):
	x[i] = (i+0.5)*dx
	
def faceval(f,i):
	fatface =  (f[i-1]+f[i])/2.0
	return fatface

j = complex(0,1)
	
ratio = [ complex(i, i) for i in range(n) ]


limiter = 1
monotonicity = 1

def vanLeer(a,b,c):
    small_qty_sq = (1.e-10)*(1.e-10);

    dsc = 0.5e0*(b - c);
    dsl = 2.e0*(a - c);
    dsr = 2.e0*(b - a);
    zero = 0.0

    return dsc

    #if(dsl*dsr > small_qty_sq):
    #    if(dsc>0):
    #           return min(abs(dsc),min(abs(dsl),abs(dsr)))
    #    else:
    #           return -1.0*min(abs(dsc),min(abs(dsl),abs(dsr)))
    #else:
    #           return zero;

def faceval(s,i):
        sm3 = s[i-3]
        sm2 = s[i-2]
        sm1 = s[i-1]
        s0 =  s[i]
        sp1 = s[i+1]
        sp2 = s[i+2]
        sp3 = s[i+3]

	flux = (s0+sp1)/2.0

        return flux

for kcount in arange(0,n,1):
	k = kdxvec[kcount]/dx
	for i in arange(0,n,1):
		f[i] = exp(j*k*x[i]) 
	for i in arange(index-10,index+10,1):
		f_face[i+1] = faceval(f,i)
	dfdx = (f_face[index+1]-f_face[index])/(dx)
	ratio[kcount] = dfdx/(j*k*exp(j*k*x[index]))#*k*dx

f = open('Spectral_2ndOrderCentral.txt','w')
plt.plot(kdxvec,real(ratio),linewidth=2,label='PPM with CFL=0.9')
plt.plot(kdxvec, -imag(ratio),linewidth=2,label='Orig. PPM no Mono')

for i in arange(1,n,1):
	f.write('%f %f %f\n'%(kdxvec[i],real(ratio[i]),-imag(ratio[i])*kdxvec[i]))

f.close()

plt.ylabel('Transfer function',fontsize=20)
plt.xlabel('$k\Delta x$',fontsize=20)
plt.legend()
#plt.savefig('./Docs/Images/OriginalPPM_Spectral_NoMono.png')
plt.show()

